{"version":3,"sources":["components/Ticket.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Ticket","props","labelArr","obj","labels","forEach","label","push","className","onClick","id","title","content","userEmail","num","d","Date","amOrPm","getHours","getMonth","getDate","getFullYear","getMinutes","getSeconds","cleanDate","creationTime","Header","allTickets","hiddenList","undefined","length","type","placeholder","onChange","e","target","value","App","useState","ticketsList","setTicketsList","setHiddenList","setAllTickets","search","setSearch","addTohiddenList","ticket","curHiddenLst","slice","client","endpoint","window","fetch","method","then","response","a","json","data","ok","console","log","Promise","reject","useEffect","document","showTicketsFromServer","ticketsArray","showTicketsFromArray","counter","filter","item","key","ticketObl","ticketObj","updateTickets","editSearch","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afd4a007.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Ticket.css';\r\n\r\nfunction cleanDate(num) {\r\n  const d = new Date(num);\r\n  const amOrPm = d.getHours() < 12 ? 'AM' : 'PM';\r\n  return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}, ${\r\n    d.getHours()}:${d.getMinutes()}:${d.getSeconds()} ${amOrPm}`;\r\n}\r\n\r\nfunction Ticket(props) {\r\n  const labelArr = [];\r\n  if (props.obj.labels) {\r\n    props.obj.labels.forEach((label) => {\r\n      labelArr.push(<span className=\"label\">{label}</span>);\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"ticket\">\r\n      <button className=\"hideTicketButton\" onClick={() => { props.onClick(props.obj); }}>Hide</button>\r\n      <div id=\"title\"><b>{props.obj.title}</b></div>\r\n      <br />\r\n      <div id=\"content\">{props.obj.content}</div>\r\n      <br />\r\n      <span id=\"userEmail\">\r\n        By\r\n        {props.obj.userEmail}\r\n        {' '}\r\n        |\r\n        {' '}\r\n      </span>\r\n      <span id=\"creationTime\">{cleanDate(props.obj.creationTime)}</span>\r\n      <span>\r\n        <ul>\r\n          {labelArr}\r\n        </ul>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ticket;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Header(props) {\r\n  let allTickets = 0;\r\n  let hiddenList = 0;\r\n  if (props.allTickets !== undefined) {\r\n    allTickets = props.allTickets.length;\r\n  }\r\n  if (props.hiddenList !== undefined) {\r\n    hiddenList = props.hiddenList.length;\r\n  }\r\n  return (\r\n    <div className=\"header\">\r\n      <span id=\"command\">\r\n        Showing {allTickets} results. (\r\n        <span id=\"hideTicketsCounter\">{hiddenList}</span>\r\n        {' '}\r\n        hidden tickets)\r\n        {hiddenList !== 0 && <button id=\"restoreHideTickets\" onClick={props.onClick}>restore</button>}\r\n      </span>\r\n      <div><input type=\"text\" id=\"searchInput\" placeholder=\"find text ...\" onChange={(e) => { props.onChange(e.target.value); }} /></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Ticket from './components/Ticket';\r\nimport Header from './components/Header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [ticketsList, setTicketsList] = useState([]);\r\n  const [hiddenList, setHiddenList] = useState([]);\r\n  const [allTickets, setAllTickets] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  useEffect(() => {\r\n    document.title = 'Tickets Manager';\r\n  }, []);\r\n\r\n  function addTohiddenList(ticket) {\r\n    const curHiddenLst = hiddenList.slice();\r\n    curHiddenLst.push(ticket);\r\n    setHiddenList(curHiddenLst);\r\n  }\r\n\r\n  function client(endpoint) {\r\n    const headers = {'content-type': 'application/json'}\r\n    const config = {\r\n      method: 'GET',\r\n    }\r\n    let search = '';\r\n    if (endpoint !== ''){\r\n      search = `?searchText=${endpoint}`;\r\n    }\r\n    return window\r\n      .fetch(`/api/tickets${search}`, config)\r\n      .then(async response => {\r\n        const data = await response.json()\r\n        if (response.ok) {\r\n          return data\r\n        } else {\r\n          console.log(\"error\");\r\n          return Promise.reject(data)\r\n        }\r\n      })\r\n  }\r\n\r\n  const showTicketsFromServer = async () => {\r\n    let ticketsArray = await client(search);\r\n    setAllTickets(ticketsArray);\r\n    const showTicketsFromArray = [];\r\n    let counter = 0;\r\n    if (ticketsArray !== undefined) {\r\n      hiddenList.forEach((ticket) => {\r\n        ticketsArray = ticketsArray.filter((item) => item.id !== ticket.id);\r\n      });\r\n      ticketsArray.forEach((ticket) => {\r\n        showTicketsFromArray.push(\r\n          <li key={counter} id={ticket.id}>\r\n            <Ticket obj={ticket} onClick={(ticketObl) => addTohiddenList(ticketObl)} />\r\n          </li>,\r\n        );\r\n        counter += 1;\r\n      });\r\n      setTicketsList(showTicketsFromArray);\r\n    }\r\n  };\r\n\r\n  function updateTickets() {\r\n    const showTicketsFromArray = [];\r\n    let counter = 0;\r\n    let ticketsArray = allTickets.slice();\r\n    if (ticketsArray !== undefined) {\r\n      hiddenList.forEach((ticket) => {\r\n        ticketsArray = ticketsArray.filter((item) => item.id !== ticket.id);\r\n      });\r\n      ticketsArray.forEach((ticket) => {\r\n        showTicketsFromArray.push(\r\n          <li key={counter} id={ticket.id}>\r\n            <Ticket obj={ticket} onClick={(ticketObj) => addTohiddenList(ticketObj)} />\r\n          </li>,\r\n        );\r\n        counter += 1;\r\n      });\r\n      setTicketsList(showTicketsFromArray);\r\n    }\r\n  }\r\n\r\n  function editSearch(value) {\r\n    setSearch(value);\r\n    setHiddenList([]);\r\n  }\r\n\r\n  function restoreLst() {\r\n    setHiddenList([]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    showTicketsFromServer();\r\n  }, [search]);\r\n\r\n  useEffect(() => {\r\n    updateTickets();\r\n  }, [hiddenList]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Header\r\n          onChange={(value) => editSearch(value)}\r\n          onClick={restoreLst}\r\n          allTickets={allTickets}\r\n          hiddenList={hiddenList}\r\n        />\r\n      </div>\r\n      <br />\r\n      <ul>\r\n        {ticketsList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}